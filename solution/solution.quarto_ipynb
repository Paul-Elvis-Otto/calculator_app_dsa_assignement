{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"solution\"\n",
        "---\n",
        "\n",
        "\n",
        "## Quarto\n",
        "\n",
        "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n"
      ],
      "id": "c02acbf5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from abc import ABC, abstractmethod\n",
        "from typing import List, Dict, Optional\n",
        "class Agent(ABC):\n",
        "    def __init__(self, name: str, preferences: list[str]):\n",
        "        self.name = name\n",
        "        self.preferences = preferences\n",
        "        self.match = None\n",
        "    \n",
        "    @abstractmethod\n",
        "    def propose(self):\n",
        "        pass\n",
        "    \n",
        "    @abstractmethod\n",
        "    def respond(self, proposer: 'Agent') -> bool:\n",
        "        pass\n",
        "\n",
        "class Proposer(Agent):\n",
        "    def propose(self):\n",
        "        \"\"\"\n",
        "        Propose to the next preferred proposee.\n",
        "        \"\"\"\n",
        "        if not self.preferences:\n",
        "            raise ValueError(f\"{self.name} has no more preferences to propose to.\")\n",
        "        return self.preferences.pop(0)\n",
        "    \n",
        "    def respond(self, proposer: 'Agent') -> bool:\n",
        "        \"\"\"\n",
        "        Proposers do not respond to proposals; they only propose.\n",
        "        \"\"\"\n",
        "        raise NotImplementedError(\"Proposers cannot respond to proposals.\")\n",
        "\n",
        "class Proposee(Agent):\n",
        "    def propose(self):\n",
        "        \"\"\"\n",
        "        Proposees do not propose; they only respond.\n",
        "        \"\"\"\n",
        "        raise NotImplementedError(\"Proposees cannot propose.\")\n",
        "    \n",
        "    def respond(self, proposer: 'Agent') -> bool:\n",
        "        \"\"\"\n",
        "        Respond to a proposal based on preferences.\n",
        "        \"\"\"\n",
        "        if self.match is None:\n",
        "            return True\n",
        "        else:\n",
        "            # If proposee is matched, compare preferences\n",
        "            current_match_index = self.preferences.index(self.match.name)\n",
        "            proposer_index = self.preferences.index(proposer.name)\n",
        "            if proposer_index < current_match_index:\n",
        "                return True\n",
        "            else:\n",
        "                return False\n",
        "\n",
        "# Gale-Shapley Algorithm\n",
        "class GaleShapley:\n",
        "    def __init__(self, proposers: list[Proposer], proposees: list[Proposee]):\n",
        "        self.proposers = proposers\n",
        "        self.proposees = proposees\n",
        "        self.matches = {}  # Stores the final matches\n",
        "    \n",
        "    def match(self) -> dict:\n",
        "        \"\"\"\n",
        "        Run the Gale-Shapley algorithm to find a stable matching.\n",
        "        \"\"\"\n",
        "        free_proposers = list(self.proposers)  # Initialize all proposers as free\n",
        "        \n",
        "        while free_proposers:\n",
        "            proposer = free_proposers.pop(0)  # Pick a free proposer\n",
        "            proposee_name = proposer.propose()  # Propose to the next preferred proposee\n",
        "            proposee = next(p for p in self.proposees if p.name == proposee_name)\n",
        "            \n",
        "            # YOUR CODE HERE\n",
        "            # If the proposee accepts the proposal\n",
        "            if proposee.respond(proposer):\n",
        "                # If proposee was already matched, free the previous match\n",
        "                if proposee.match is not None:\n",
        "                    previous_match = proposee.match\n",
        "                    previous_match.match = None\n",
        "                    free_proposers.append(previous_match)\n",
        "                \n",
        "                # Match the proposer and proposee\n",
        "                proposer.match = proposee\n",
        "                proposee.match = proposer\n",
        "                self.matches[proposer.name] = proposee.name\n",
        "            else:\n",
        "                # If rejected, put proposer back in the free list\n",
        "                free_proposers.append(proposer)\n",
        "        \n",
        "        return self.matches\n",
        "\n",
        "# Example from slide #13 (assuming)\n",
        "# Test Case 1: Men as proposers\n",
        "def test_case_1():\n",
        "    print(\"Test Case 1: Men as proposers\")\n",
        "    \n",
        "    # Create proposers (men)\n",
        "    men = [\n",
        "        Proposer(\"A\", [\"X\", \"Y\", \"Z\"]),\n",
        "        Proposer(\"B\", [\"Y\", \"Z\", \"X\"]),\n",
        "        Proposer(\"C\", [\"Y\", \"X\", \"Z\"])\n",
        "    ]\n",
        "    \n",
        "    # Create proposees (women)\n",
        "    women = [\n",
        "        Proposee(\"X\", [\"B\", \"A\", \"C\"]),\n",
        "        Proposee(\"Y\", [\"C\", \"B\", \"A\"]),\n",
        "        Proposee(\"Z\", [\"A\", \"C\", \"B\"])\n",
        "    ]\n",
        "    \n",
        "    # Run Gale-Shapley algorithm\n",
        "    gs = GaleShapley(men, women)\n",
        "    matches = gs.match()\n",
        "    \n",
        "    print(\"Final matches:\")\n",
        "    for proposer, proposee in matches.items():\n",
        "        print(f\"{proposer} → {proposee}\")\n",
        "    \n",
        "    # Expected: A-Z, B-X, C-Y (based on standard Gale-Shapley with men proposing)\n",
        "    print(\"\\n\")\n",
        "\n",
        "# Test Case 2: Women as proposers\n",
        "def test_case_2():\n",
        "    print(\"Test Case 2: Women as proposers\")\n",
        "    \n",
        "    # Create proposers (women)\n",
        "    women_proposers = [\n",
        "        Proposer(\"X\", [\"B\", \"A\", \"C\"]),\n",
        "        Proposer(\"Y\", [\"C\", \"B\", \"A\"]),\n",
        "        Proposer(\"Z\", [\"A\", \"C\", \"B\"])\n",
        "    ]\n",
        "    \n",
        "    # Create proposees (men)\n",
        "    men_proposees = [\n",
        "        Proposee(\"A\", [\"X\", \"Y\", \"Z\"]),\n",
        "        Proposee(\"B\", [\"Y\", \"Z\", \"X\"]),\n",
        "        Proposee(\"C\", [\"Y\", \"X\", \"Z\"])\n",
        "    ]\n",
        "    \n",
        "    # Run Gale-Shapley algorithm\n",
        "    gs = GaleShapley(women_proposers, men_proposees)\n",
        "    matches = gs.match()\n",
        "    \n",
        "    print(\"Final matches:\")\n",
        "    for proposer, proposee in matches.items():\n",
        "        print(f\"{proposer} → {proposee}\")\n",
        "    \n",
        "    # Expected outcome when women propose\n",
        "\n",
        "# Run the tests\n",
        "print(\"Testing Gale-Shapley Algorithm Implementation\")\n",
        "print(\"-\" * 40)\n",
        "test_case_1()\n",
        "print(\"-\" * 40)\n",
        "test_case_2()"
      ],
      "id": "a173dd7e",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}